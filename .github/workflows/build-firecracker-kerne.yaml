name: Build Firecracker Kernel with BTF

on:
  push:
    branches:
      - main
    paths:
      - 'resources/guest_configs/microvm-kernel-ci-x86_64-6.1.config'
      - '.github/workflows/build-kernel-btf.yml'
  workflow_dispatch:
    inputs:
      kernel_version:
        description: 'Kernel version to build (e.g., 6.1.102)'
        required: false
        default: '6.1.102'

jobs:
  build-kernel:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Firecracker repository
        uses: actions/checkout@v4
        with:
          repository: ashishkurmi/firecracker
          ref: main

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            libncurses-dev \
            bison \
            flex \
            libssl-dev \
            libelf-dev \
            liblz4-tool \
            git \
            bc \
            kmod \
            cpio \
            python3 \
            python3-pip \
            dwarves \
            zstd \
            pahole \
            wget \
            gcc \
            make

      - name: Prepare kernel config with BTF support
        run: |
          # Determine kernel major.minor version for config file
          KERNEL_VERSION="${{ github.event.inputs.kernel_version || '6.1.102' }}"
          KERNEL_MAJOR=$(echo $KERNEL_VERSION | cut -d. -f1)
          KERNEL_MINOR=$(echo $KERNEL_VERSION | cut -d. -f2)
          CONFIG_VERSION="${KERNEL_MAJOR}.${KERNEL_MINOR}"
          
          # Use the appropriate config file
          CONFIG_FILE="resources/guest_configs/microvm-kernel-ci-x86_64-${CONFIG_VERSION}.config"
          
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "Config file not found: $CONFIG_FILE"
            echo "Trying to use 6.1 config as fallback..."
            CONFIG_FILE="resources/guest_configs/microvm-kernel-ci-x86_64-6.1.config"
          fi
          
          # Copy config to working directory
          cp $CONFIG_FILE kernel.config
          
          # Enable BTF support in the config
          echo "Updating kernel config to enable BTF..."
          
          # Remove any existing BTF config lines that might be disabled
          sed -i '/CONFIG_DEBUG_INFO_BTF/d' kernel.config
          sed -i '/CONFIG_DEBUG_INFO_DWARF/d' kernel.config
          sed -i '/CONFIG_DEBUG_INFO_NONE/d' kernel.config
          sed -i '/# CONFIG_DEBUG_INFO is not set/d' kernel.config
          
          # Add BTF support configuration
          cat >> kernel.config << 'EOF'
          CONFIG_EXPERT=y

          # BTF Support for eBPF CO-RE
          CONFIG_DEBUG_INFO=y
          CONFIG_DEBUG_INFO_DWARF_TOOLCHAIN_DEFAULT=y
          CONFIG_DEBUG_INFO_BTF=y
          CONFIG_DEBUG_INFO_BTF_MODULES=y
          
          # Additional BPF features for security monitoring
          CONFIG_BPF_LSM=y
          CONFIG_LSM="lockdown,yama,loadpin,safesetid,integrity,bpf"
          CONFIG_FTRACE=y
          CONFIG_FUNCTION_TRACER=y
          CONFIG_KPROBES=y
          CONFIG_KPROBE_EVENTS=y
          CONFIG_UPROBE_EVENTS=y
          
          # This was missing and added it now
          CONFIG_PCI=y

          #Another to debug ecapture and armor
          CONFIG_KPROBES=y
          CONFIG_KPROBE_EVENTS=y
          CONFIG_BPF_JIT=y
          CONFIG_BPF_JIT_ALWAYS_ON=y
          CONFIG_FAULT_INJECTION=y
          CONFIG_FAULT_INJECTION_DEBUG_FS=y
          CONFIG_FUNCTION_ERROR_INJECTION=y
          CONFIG_BPF_KPROBE_OVERRIDE=y

          EOF
          
          echo "Config file updated with BTF support"
          #grep -E "CONFIG_DEBUG_INFO|CONFIG_BPF" kernel.config | tail -20
          cat kernel.config

      - name: Download and prepare kernel source
        run: |
          KERNEL_VERSION="${{ github.event.inputs.kernel_version || '6.1.102' }}"
          
          # Download kernel source
          echo "Downloading kernel ${KERNEL_VERSION}..."
          wget -q https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-${KERNEL_VERSION}.tar.xz
          
          echo "Extracting kernel source..."
          tar xf linux-${KERNEL_VERSION}.tar.xz
          
          # Copy our config to the kernel source
          cp kernel.config linux-${KERNEL_VERSION}/.config
          
          cd linux-${KERNEL_VERSION}
          
          # Update config to resolve dependencies
          make olddefconfig

      - name: Build kernel with BTF
        run: |
          KERNEL_VERSION="${{ github.event.inputs.kernel_version || '6.1.102' }}"
          cd linux-${KERNEL_VERSION}
          
          # Use all available cores for faster build
          CORES=$(nproc)
          echo "Building kernel with ${CORES} cores..."
          
          # Build the kernel
          make -j${CORES} vmlinux
          
          # Check if build was successful
          if [ -f vmlinux ]; then
            echo "✅ Kernel built successfully"
            ls -lah vmlinux
            
            # Verify BTF section exists
            if readelf -S vmlinux | grep -q ".BTF"; then
              echo "✅ BTF section found in vmlinux"
              readelf -S vmlinux | grep BTF
              
              # Get BTF section size
              BTF_SIZE=$(readelf -S vmlinux | grep ".BTF" | awk '{print $6}')
              echo "BTF section size: 0x${BTF_SIZE}"
            else
              echo "❌ WARNING: BTF section not found in vmlinux"
              echo "This might be a configuration issue"
            fi
          else
            echo "❌ Kernel build failed"
            exit 1
          fi

      - name: Extract BTF data
        run: |
          KERNEL_VERSION="${{ github.event.inputs.kernel_version || '6.1.102' }}"
          cd linux-${KERNEL_VERSION}
          
          # Install bpftool if not available
          if ! command -v bpftool &> /dev/null; then
            echo "Installing bpftool..."
            sudo apt-get install -y linux-tools-common linux-tools-$(uname -r) 2>/dev/null || true
          fi
          
          # Try to extract BTF data
          if command -v bpftool &> /dev/null; then
            echo "Extracting BTF data..."
            bpftool btf dump file vmlinux format raw > vmlinux.btf 2>/dev/null || true
            if [ -s vmlinux.btf ]; then
              echo "✅ BTF data extracted successfully"
              ls -lah vmlinux.btf
            else
              echo "⚠️ Could not extract BTF data"
            fi
          else
            echo "bpftool not available, skipping BTF extraction"
          fi

      - name: Package kernel artifacts
        run: |
          KERNEL_VERSION="${{ github.event.inputs.kernel_version || '6.1.102' }}"
          
          # Create artifacts directory
          mkdir -p artifacts
          
          # Copy and rename the kernel to match Firecracker naming convention
          cp linux-${KERNEL_VERSION}/vmlinux artifacts/vmlinux-${KERNEL_VERSION}-btf
          
          # Compress the kernel
          gzip -9 -c linux-${KERNEL_VERSION}/vmlinux > artifacts/vmlinux-${KERNEL_VERSION}-btf.gz
          
          # Copy BTF file if it exists
          if [ -f linux-${KERNEL_VERSION}/vmlinux.btf ]; then
            cp linux-${KERNEL_VERSION}/vmlinux.btf artifacts/vmlinux-${KERNEL_VERSION}.btf
          fi
          
          # Copy the config for reference
          cp linux-${KERNEL_VERSION}/.config artifacts/kernel-config-${KERNEL_VERSION}-btf
          
          # Create checksums
          cd artifacts
          sha256sum * > SHA256SUMS
          
          echo "=== Artifacts created ==="
          ls -lah

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: firecracker-kernel-${{ github.event.inputs.kernel_version || '6.1.102' }}-btf
          path: |
            artifacts/*
          retention-days: 30

      - name: Create release
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: kernel-${{ github.event.inputs.kernel_version || '6.1.102' }}-btf-${{ github.run_number }}
          name: Firecracker Kernel ${{ github.event.inputs.kernel_version || '6.1.102' }} with BTF
          body: |
            # Firecracker Kernel with BTF Support
            
            This kernel is built for Firecracker with BTF (BPF Type Format) support enabled.
            
            ## Features
            - ✅ BTF support for eBPF CO-RE programs (Harden-Runner compatible)
            - ✅ Based on Firecracker's microvm-kernel-ci-x86_64 configuration
            - ✅ BPF LSM support for security monitoring
            - ✅ Kprobes/Uprobes support for tracing
            - ✅ Kernel version: ${{ github.event.inputs.kernel_version || '6.1.102' }}
            
            ## Files
            - `vmlinux-${{ github.event.inputs.kernel_version || '6.1.102' }}-btf` - Uncompressed kernel with BTF
            - `vmlinux-${{ github.event.inputs.kernel_version || '6.1.102' }}-btf.gz` - Compressed kernel
            - `vmlinux-${{ github.event.inputs.kernel_version || '6.1.102' }}.btf` - Extracted BTF data
            - `kernel-config-${{ github.event.inputs.kernel_version || '6.1.102' }}-btf` - Kernel configuration used
            
            ## Usage
            
            1. Download the kernel:
            ```bash
            wget https://github.com/${{ github.repository }}/releases/download/kernel-${{ github.event.inputs.kernel_version || '6.1.102' }}-btf-${{ github.run_number }}/vmlinux-${{ github.event.inputs.kernel_version || '6.1.102' }}-btf
            ```
            
            2. Update your Firecracker configuration:
            ```yaml
            firecracker:
              kernel_image_path: /var/lib/fireactions/kernels/vmlinux-${{ github.event.inputs.kernel_version || '6.1.102' }}-btf
            ```
            
            3. Verify BTF support in your VM:
            ```bash
            ls -la /sys/kernel/btf/vmlinux
            ```
            
            ## Build Information
            - Built from commit: ${{ github.sha }}
            - Build date: ${{ github.run_id }}
            - GitHub Actions run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          files: |
            artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build summary
        run: |
          KERNEL_VERSION="${{ github.event.inputs.kernel_version || '6.1.102' }}"
          
          echo "# 🚀 Firecracker Kernel Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ✅ Successfully built kernel ${KERNEL_VERSION} with BTF support" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🔧 BTF Configuration" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          grep -E "CONFIG_DEBUG_INFO_BTF|CONFIG_BPF_LSM|CONFIG_BPF_SYSCALL" kernel.config | grep -v "^#" | head -20 >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📦 Artifacts Created" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          ls -lah artifacts/ >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f artifacts/vmlinux-${KERNEL_VERSION}.btf ]; then
            BTF_SIZE=$(ls -lah artifacts/vmlinux-${KERNEL_VERSION}.btf | awk '{print $5}')
            echo "### ✅ BTF Status" >> $GITHUB_STEP_SUMMARY
            echo "- BTF data successfully extracted: **${BTF_SIZE}**" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ⚠️ BTF Status" >> $GITHUB_STEP_SUMMARY
            echo "- BTF extraction not available (bpftool missing)" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Download the kernel from the release page" >> $GITHUB_STEP_SUMMARY
          echo "2. Update your Firecracker configuration to use the new kernel" >> $GITHUB_STEP_SUMMARY
          echo "3. Your Harden-Runner agent should now work without BTF errors!" >> $GITHUB_STEP_SUMMARY
